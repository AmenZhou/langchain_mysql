name: Test Suite

on:
  pull_request:
  push:

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: testpassword
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend image
      run: |
        cd backend
        docker build -t backend:test .

    - name: Run unit and integration tests
      run: |
        cd backend
        docker run --rm \
          --network host \
          -e DATABASE_URL=mysql+pymysql://test_user:testpassword@localhost:3306/test_db \
          -e OPENAI_API_KEY=test_key \
          -e PYTHONPATH=/app \
          -v $(pwd):/app \
          backend:test \
          sh -c "cd /app && python -m pytest tests/ -v --import-mode=importlib --tb=short"

    - name: Test deployment setup
      run: |
        # Test that the server can start without import errors
        cd backend
        timeout 30s docker run --rm \
          --network host \
          -e DATABASE_URL=mysql+pymysql://test_user:testpassword@localhost:3306/test_db \
          -e OPENAI_API_KEY=test_key \
          -e PYTHONPATH=/app \
          -v $(pwd):/app \
          backend:test \
          sh -c "cd /app && python -c 'import langchain_mysql; print(\"Import successful\")'" || true

    - name: Run smoke tests
      run: |
        # Start the server in background
        cd backend
        docker run -d --name test_server \
          --network host \
          -e DATABASE_URL=mysql+pymysql://test_user:testpassword@localhost:3306/test_db \
          -e OPENAI_API_KEY=test_key \
          -e PYTHONPATH=/app \
          -v $(pwd):/app \
          backend:test \
          sh -c "cd /app && python -m uvicorn langchain_mysql:app --host 0.0.0.0 --port 8000" || true
        
        # Wait for server to start
        sleep 15
        
        # Test health endpoint
        curl -f http://localhost:8000/health || echo "Health check failed"
        
        # Clean up
        docker stop test_server || true
        docker rm test_server || true 