name: PII Filter Test

on:
  pull_request:
    paths:
      - 'backend/utils/**'
      - 'backend/prompts.py'
      - 'backend/langchain_mysql.py'
      - 'backend/config.py'
      - 'backend/charts/**'
  push:
    paths:
      - 'backend/utils/**'
      - 'backend/prompts.py'
      - 'backend/langchain_mysql.py'
      - 'backend/config.py'
      - 'backend/charts/**'

jobs:
  pii-filter-test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: sakila
          MYSQL_USER: test_user
          MYSQL_PASSWORD: testpassword
        cmd: ["--default-authentication-plugin=mysql_native_password"]
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Load Sakila sample database
      run: |
        # Download and load Sakila sample database
        wget -O sakila.sql https://downloads.mysql.com/docs/sakila-db.zip
        unzip -p sakila-db.zip sakila-db/sakila-schema.sql > sakila-schema.sql
        unzip -p sakila-db.zip sakila-db/sakila-data.sql > sakila-data.sql
        
        # Load the database
        mysql -h 127.0.0.1 -u test_user -ptestpassword sakila < sakila-schema.sql
        mysql -h 127.0.0.1 -u test_user -ptestpassword sakila < sakila-data.sql

    - name: Build backend image
      run: |
        cd backend
        docker build -t backend:pii-test .

    - name: Test PII Filter - Unit Tests
      run: |
        cd backend
        docker run --rm \
          -e OPENAI_API_KEY=test_key \
          -e PYTHONPATH=/app \
          -v $(pwd):/app \
          backend:pii-test \
          sh -c "cd /app && python -m pytest tests/test_utils.py::test_sanitize_sql_response_success -v"

    - name: Test PII Filter - Integration Test
      run: |
        cd backend
        docker run --rm \
          --network host \
          -e DATABASE_URL=mysql+pymysql://test_user:testpassword@localhost:3306/sakila \
          -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY || 'test_key' }} \
          -e PYTHONPATH=/app \
          -v $(pwd):/app \
          backend:pii-test \
          sh -c "cd /app && python -c '
import asyncio
from utils.sql_utils import sanitize_query_data

# Test data with PII
test_data = [
    {\"customer_id\": 1, \"email\": \"john.doe@email.com\", \"phone\": \"555-1234\"},
    {\"customer_id\": 2, \"email\": \"jane.smith@email.com\", \"phone\": \"555-5678\"}
]

async def test():
    try:
        result = await sanitize_query_data(test_data)
        print(\"PII Filter Test Result:\")
        print(result)
        # Check if emails are filtered
        for item in result:
            if \"@\" in str(item.get(\"email\", \"\")):
                print(\"WARNING: Email not filtered!\")
                exit(1)
        print(\"✅ PII Filter working correctly\")
    except Exception as e:
        print(f\"❌ PII Filter test failed: {e}\")
        exit(1)

asyncio.run(test())
'"

    - name: Comment on PR with PII Filter Status
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '✅ PII Filter tests passed! The data sanitization is working correctly.'
          }) 